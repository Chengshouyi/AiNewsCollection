# docker-compose.yml
# Base configuration, suitable for production-like environments

services:
  db:
    image: postgres:15 # 使用明確的版本號
    container_name: ainews-postgres
    restart: unless-stopped
    environment:
      # --- 安全性警告 ---
      # 不要在生產環境硬編碼密碼！請改用環境變數注入或 Docker Secrets。
      POSTGRES_DB: ${POSTGRES_DB:-ainews} # 可從 .env 文件讀取，預設為 ainews
      POSTGRES_USER: ${POSTGRES_USER:-ainews_user} # 可從 .env 文件讀取，預設為 ainews_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-your_strong_password} # 應從 .env 文件讀取!
    volumes:
      - postgres-data:/var/lib/postgresql/data # 資料持久化
    networks:
      - default
    healthcheck:
      # 可選：增加健康檢查，確保資料庫可用
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-ainews_user} -d ${POSTGRES_DB:-ainews}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  migrate:
    build:
      context: ./backend-python
      dockerfile: Dockerfile # 使用生產環境的 Dockerfile
    container_name: ainews-migrate
    volumes:
      - ./backend-python:/app
    depends_on:
      db:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql+psycopg2://${POSTGRES_USER:-ainews_user}:${POSTGRES_PASSWORD:-your_strong_password}@db:5432/${POSTGRES_DB:-ainews}
    entrypoint: [] # 覆蓋 Dockerfile 中的 ENTRYPOINT
    command: alembic upgrade head
    restart: 'no'
    networks:
      - default

  backend-python:
    build:
      context: ./backend-python
      dockerfile: Dockerfile # 指定 Dockerfile 路徑
    container_name: ainews-backend-python
    restart: unless-stopped
    entrypoint: [] # 覆蓋 Dockerfile 中的 ENTRYPOINT
    command: gunicorn --worker-class=eventlet --workers=1 --bind=0.0.0.0:8000 src.web.app:app
    environment:
      - FLASK_ENV=production # 生產環境模式
      # --- 安全性警告 ---
      # 使用 ${VAR_NAME:-default} 語法可以從 .env 文件讀取變數
      - DATABASE_URL=postgresql+psycopg2://${POSTGRES_USER:-ainews_user}:${POSTGRES_PASSWORD:-your_strong_password}@db:5432/${POSTGRES_DB:-ainews}
      - SECRET_KEY=${SECRET_KEY:-your_very_strong_production_secret_key_here} # 應從 .env 文件讀取!

    depends_on:
      # <--- 確保 web 依賴 migrate
      migrate:
        condition: service_completed_successfully
        # condition: service_started # 或者只等待 db 啟動 (如果沒有 healthcheck)
    ports:
      - "8001:8000" # 將主機的 8001 映射到容器的 8000
    volumes:
      - app-logs:/app/logs # 將日誌 volume 掛載到容器的 /app/logs
      - data-volume:/app/data # 將 data volume 掛載到容器的 /app/data
      # - ./backend-python:/app  # <--- 將程式碼掛載到 /app (或者考慮 COPY 進 image)
      # 注意：生產環境通常建議將程式碼 COPY 到映像檔中，而不是 volume mount，除非有特殊需求。
      # Dockerfile 中已經有 COPY， build image 前需確保本地 backend-python 資料夾內容是最新的。
    networks:
      - default
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/health" ]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: ainews-frontend
    command: sh -c "npm run build && npx serve -s dist"
    # volumes:
      # - ./frontend:/app # <--- 生產環境只掛載 frontend 到 /app (或 COPY)
      # Dockerfile 中已經有 COPY， build image 前需確保本地 frontend 資料夾內容是最新的。
    ports:
      - "8080:8080" # 生產環境可用 8080
    environment:
      - NODE_ENV=production

  node-services:
    build:
      context: ./node-services
      dockerfile: Dockerfile # <--- 請確保 node-services/Dockerfile 存在且為生產用，開發完成後需決定是整體build image 還是分開build image
      # 目前 node-services 資料夾內有兩個 Dockerfile，分別是 api-gateway 和 websocket-server
    container_name: ainews-node-services
    command: sh -c "npm run build && npm run start"
    # volumes:
      # - ./node-services:/app # <--- 生產環境只掛載 node-services 到 /app (或 COPY)
      # Dockerfile 中已經有 COPY， build image 前需確保本地 node-services 資料夾內容是最新的。
    ports:
      - "3000:3000"   # API Gateway
      - "4000:4000"   # WebSocket
    environment:
      - NODE_ENV=production
    restart: unless-stopped
    networks:
      - default

volumes:
  postgres-data:
    driver: local # 定義 PostgreSQL 資料的 volume
  app-logs:
    # 定義 logs volume
    driver: local
  data-volume:
    # 定義 data volume
    driver: local

networks:
  # 定義預設網路
  default:
    driver: bridge
