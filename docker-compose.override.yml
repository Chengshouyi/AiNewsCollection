# docker-compose.override.yml
# Development specific overrides

services:
  db:
    # 開發環境通常不需要覆蓋 db，但可以修改 port 映射或密碼 (如果需要)
    ports:
      - "5432:5432" # 確保開發時能從本機連接

  backend-python:
    build:
      context: ./backend-python
      dockerfile: .devcontainer/Dockerfile
    command: sleep infinity
    # flask run --host=0.0.0.0 --port=8000 --debug # 使用 Flask 開發伺服器並啟用除錯模式
    volumes:
      - .:/workspace:cached
      - /var/run/docker.sock:/var/run/docker.sock

    environment:
      - FLASK_ENV=development # 設定為開發模式
      # - FLASK_APP=src.web.app:app
      - PYTHONPATH=/workspace
      # 例如，如果需要更詳細的 SQL 日誌:
      # - SQLALCHEMY_ECHO=True
    ports:
      - "8001:8000" # 保留 port 映射，方便從瀏覽器訪問
      # 如果你需要用 debugpy 等工具進行遠程除錯，可以再增加端口映射
      # - "5678:5678"
      # restart: 'no' # 開發時可能不需要自動重啟
  migrate:
    build:
      context: ./backend-python
      dockerfile: .devcontainer/Dockerfile
    volumes:
      - .:/workspace:cached
    command: >
      bash -c "
        pip install --user -r /workspace/backend-python/requirements.txt &&
        export PATH=\"/home/vscode/.local/bin:$PATH\" &&
        cd /workspace/backend-python &&
        /usr/local/bin/python3 -m alembic upgrade head
      "
  frontend:
    build:
      context: ./frontend
      dockerfile: .devcontainer/Dockerfile
    # 開發模式下保持容器運行
    command: sleep infinity
    # sh -c "cd /workspace/frontend && npm install && npm run dev -- --host 0.0.0.0"
    volumes:
      - .:/workspace:cached
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "5251:5173"
    environment:
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=true # 解決某些開發環境的檔案監控問題
    user: vscode
  node-services:
    build:
      context: ./node-services
      dockerfile: .devcontainer/Dockerfile
    # 將工作目錄設定為 node-services monorepo 的根目錄
    working_dir: /workspace/node-services
    # 修改命令來啟動所有 NestJS 服務 (需要您在 package.json 中定義 'start:all' 腳本)
    command: sleep infinity
    # command: pnpm run dev # 在開發模式下啟動服務
    volumes:
      # 掛載整個專案根目錄到容器的 /workspace
      - .:/workspace:cached
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "3000:3000" # api-gateway 的端口
      - "4000:4000" # websocket-server 的端口

    environment:
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=true
      - TSC_WATCHFILE=useFsEvents
      - NEST_DEBUG=true
    user: vscode
    # 添加健康檢查 (請根據您的服務實際情況調整端口和路徑)
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:3000/healthz" ]
      interval: 30s
      timeout: 10s
      retries: 3
