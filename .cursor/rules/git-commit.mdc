---
description: 
globs: 
alwaysApply: true
---
# Git Commit Message 規範

## 基本格式
```
<type>(<scope>): <subject>

<body>

<footer>
```

## 類型（Type）
- `feat`: 新功能
- `fix`: 修復錯誤
- `docs`: 文檔更新
- `style`: 代碼格式（不影響代碼運行的變動）
- `refactor`: 重構（既不是新增功能，也不是修改 bug 的代碼變動）
- `perf`: 性能優化
- `test`: 增加測試
- `chore`: 構建過程或輔助工具的變動
- `revert`: 回滾到上一個版本

## 範圍（Scope）
- 影響的模塊或文件
- 例如：`(auth)`, `(user)`, `(api)`

## 主題（Subject）
- 簡短描述，不超過 50 個字符
- 使用現在時態
- 首字母不大寫
- 結尾不加句號

## 正文（Body）
- 詳細說明變更原因和內容
- 每行不超過 72 個字符
- 使用現在時態
- 說明變更的動機和與之前行為的對比

## 頁腳（Footer）
- 關聯的 Issue 編號
- 破壞性變更說明
- 相關的 Pull Request 編號

## 檔案變更摘要
每個檔案的變更都應該包含：
1. 變更類型（新增/修改/刪除）
2. 變更範圍（影響的功能或模塊）
3. 變更原因
4. 變更影響

## 範例
```
feat(auth): 實現用戶登入功能

- 新增登入表單組件
- 實現 JWT 認證
- 添加登入狀態管理

檔案變更：
- src/components/auth/LoginForm.vue: 新增登入表單組件
- src/store/modules/auth.js: 實現登入狀態管理
- src/api/auth.js: 添加登入 API 調用
- src/router/guards/auth.js: 實現路由權限控制

Closes #123
```

## 最佳實踐
1. 每個 commit 只做一件事
2. 保持 commit 的原子性
3. 使用清晰的動詞開頭
4. 避免使用模糊的詞語
5. 相關的變更放在同一個 commit
6. 定期整理 commit 歷史

<!-- ## 自動化工具
- 使用 commitlint 進行格式檢查
- 使用 husky 設置 git hooks
- 使用 commitizen 引導式提交
- 使用 conventional-changelog 生成變更日誌

## 提交前檢查清單
- [ ] 代碼是否通過所有測試
- [ ] 是否更新了相關文檔
- [ ] 是否添加了必要的測試
- [ ] 是否遵循了代碼規範
- [ ] 是否處理了所有 TODO 註釋
- [ ] 是否更新了版本號（如需要）

## 特殊情況處理
1. 合併提交
   - 使用 `merge` 類型
   - 說明合併的分支和原因

2. 緊急修復
   - 使用 `hotfix` 類型
   - 標記為緊急修復
   - 說明修復的緊急程度

3. 版本發布
   - 使用 `release` 類型
   - 包含版本號
   - 列出主要變更

## 提交頻率建議
- 功能開發：每完成一個小功能
- 錯誤修復：每修復一個問題
- 代碼重構：每完成一個重構單元
- 文檔更新：每完成一個文檔章節 -->

